Object Oriented Design:
SOLID Principles :

S -> Single Reponsiblity Principles [SRP]
O -> Open - Closed Principles
L -> Liskov Substitution Principle
I -> Interface Segregation
D -> Dependency Inversion

Software must be 
1. Maintainable
2. Understandable
3. Flexible

Single Reponsiblity Principle :
-> A class should have only one reponsibility
-> It should have only one reason to change
-> Testing : fewer test cases
-> Lower-coupling : fewer Dependencies
-> Organization : well-organized

Open-Closed Principle
-> Classes must be open for extension and closed for modification
-> It prevents potential new bugs in code 
-> The existing class must be extended instead of modifying

Liskov Substitution Principle
-> If class A is subtype of class B, 
we should be able to replace B with A without disrupting the  behaviour of the program

Interface Segregation
-> Larger interfaces must split into smaller ones
-> To ensure that implementing classes only need to be concerned about the methods that are of interest to them

Dependency Inversion
-> Refers to decoupling of software modules
-> Instead of high-level modules depending on low-level modules, both will depend on abstractions.